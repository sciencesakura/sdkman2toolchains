package com.sciencesakura.sdkman2toolchains;

import java.io.OutputStream;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

/**
 * Writes toolchains.xml.
 */
public final class ToolchainWriter implements AutoCloseable {

  private final XMLStreamWriter writer;

  /**
   * Constructs a new instance.
   *
   * @param stream the output stream
   * @throws XMLStreamException if an error occurs
   */
  public ToolchainWriter(OutputStream stream) throws XMLStreamException {
    writer = XMLOutputFactory.newFactory().createXMLStreamWriter(stream);
    writer.writeStartDocument();
    writer.writeComment("Generated by com.sciencesakura.sdkman2toolchains");
    writer.writeStartElement("toolchains");
    writer.writeDefaultNamespace("http://maven.apache.org/TOOLCHAINS/1.0.0");
    writer.writeNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
    writer.writeAttribute("http://www.w3.org/2001/XMLSchema-instance",
        "schemaLocation",
        "http://maven.apache.org/TOOLCHAINS/1.0.0 http://maven.apache.org/xsd/toolchains-1.0.0.xsd");
  }

  /**
   * Writes a toolchain element.
   *
   * @param toolchain the toolchain
   */
  public void write(Toolchain toolchain) {
    try {
      // <toolchain>
      writer.writeStartElement("toolchain");
      //   <type>
      writer.writeStartElement("type");
      writer.writeCharacters(toolchain.type());
      writer.writeEndElement();
      //   </type>
      //   <provides>
      writer.writeStartElement("provides");
      for (var entry : toolchain.provides().entrySet()) {
        writer.writeStartElement(entry.getKey());
        writer.writeCharacters(entry.getValue());
        writer.writeEndElement();
      }
      writer.writeEndElement();
      //   </provides>
      //   <configuration>
      writer.writeStartElement("configuration");
      for (var entry : toolchain.configuration().entrySet()) {
        writer.writeStartElement(entry.getKey());
        writer.writeCharacters(entry.getValue());
        writer.writeEndElement();
      }
      writer.writeEndElement();
      //   </configuration>
      writer.writeEndElement();
      // </toolchain>
    } catch (XMLStreamException e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public void close() throws XMLStreamException {
    writer.writeEndElement();
    writer.writeEndDocument();
    writer.close();
  }
}
